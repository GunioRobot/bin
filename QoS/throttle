#!/bin/bash
#
# Set the following values to somewhat less than your actual uplink speed.
# In kilobits

UPLINK=500

# The outside device

DEV=eth0

# clean existing down- and uplink qdiscs, hide errors

/sbin/tc qdisc del dev $DEV root 2> /dev/null > /dev/null
/sbin/tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null

# Allow the throttle to be turned off

if [ "x$1" = "xstop" ]
then
	echo "Terminating throttle..."
	exit
fi

###
# Outbound Classes
###

# install root CBQ

/sbin/tc qdisc add dev $DEV root handle 1: cbq avpkt 1000 bandwidth 100mbit 

# main class (downlink speed limited)

/sbin/tc class add dev $DEV parent 1: classid 1:1 cbq rate ${UPLINK}kbit \
   allot 1500 prio 5 bounded isolated 

# high prio class 1:10:

/sbin/tc class add dev $DEV parent 1:1 classid 1:10 cbq rate ${UPLINK}kbit \
   allot 1600 prio 1 avpkt 1000

# bulk and default class 1:20 - gets slightly less traffic, and a lower priority:
/sbin/tc class add dev $DEV parent 1:1 classid 1:20 cbq rate $[$UPLINK-50]kbit \
   allot 1600 prio 2 avpkt 1002

# both get Stochastic Fairness:
/sbin/tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
/sbin/tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10

###
# Start Filters
###

# TOS Minimum Delay (ssh, NOT scp) in 1:10:

/sbin/tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
      match ip tos 0x10 0xff flowid 1:10

# All UDP in the interactive class 1:0

/sbin/tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
	match ip protocol 17 0xff flowid 1:10

# To speed up downloads while an upload is going on, put ACK packets in
# the interactive class:

/sbin/tc filter add dev $DEV parent 1: protocol ip prio 12 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   match u8 0x10 0xff at 33 \
   flowid 1:10

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

/sbin/tc filter add dev $DEV parent 1: protocol ip prio 13 u32 \
   match ip dst 0.0.0.0/0 flowid 1:20
