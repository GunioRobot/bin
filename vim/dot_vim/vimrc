"Shlomi's .vimrc file - use Vim power ! :)
" Use it however/wherever/whenever you want to.
" Thanks goes to Gregory Borodin and Ken Fox.
"
" Last update: 23/1/2004
" Added from last version: 
"  * Costumized some folding options to use identation
"  * Added <F9> to compile with gcc and open error window
"  * Added some tips from Gregory's vimrc file

"
" Added Fri Oct 21 15:41:49 EDT 2005
" To allow viewing of man pages and code at the same time
"
:runtime! ftplugin/man.vim

"
"obscure all text via rot13 hit F3 to rot and derot the file
"
map <F8> ggVGg?

"
"Fix pasting see :help 'paste
"
:set pastetoggle=<F10> 

"
"Use spell check
"
"map <F1> :setlocal spell spelllang=en_us
"nnoremap ,ms :setlocal spell spelllang=en_us<CR>:nmap n ]S<CR>:nmap N [S<CR>:echo "]s  [s  ]S  [S  zG  zW  z=  :spellr"<CR>
"nnoremap ,mS :nunmap n<CR>:nunmap N<CR>:setlocal spell spelllang=<CR>

nnoremap <F1> :setlocal spell spelllang=en_us<CR>:nmap n ]S<CR>:nmap N [S<CR>:echo "]s  [s  ]S  [S  zG  zW  z=  :spellr"<CR>
nnoremap <F2> :nunmap n<CR>:nunmap N<CR>:setlocal spell spelllang=<CR>

"
"Bounce the cursor between both parens
"
inoremap ) )<c-o>%<c-o>:sleep 500m<CR><c-o>%<c-o>a

"
" if c file is 'file.c' this will make the object file 'file'
"
"set makeprg=gcc\ -o\ %<\ %

" have syntax highlighting in terminals which can display colours:
if has('syntax') && (&t_Co > 2)
	syntax on
endif

set background=dark           "  Backgound is dark or light
set backspace=2               "  Allow backspacing over identatiom, end-of-line, and start-of-line
set hidden                    "  Enable working with hidden buffers
"set vb                        " no beep
set ic                        " ingnore case in search
set scs                       " case sensitive when upper case search pattern
set scroll=0                  " set Pg Up/Dn to half screen size
set ru                        " cursor position
set cpt=.,w,b,u,t,i           " completion by all buffers, included files, etc
set bs=eol,start,indent       " allow backspacing over autoindent, line breaks, start of insert

"  Show matching parenthesis (Shlomi hates this, use '%' ffs)
set showmatch

set laststatus=2              "  Always show status line

"   Folding options:
set foldmethod=indent         "  fold by indentation
set foldnestmax=1             "  1 level of folding is enough for me
set foldminlines=6            "  do not fold short functions
set foldlevel=1               "  Start unfolded (fold only if i say so)
"  I like to start unfolded 
"  to fold use 'zM'
"  to fold/unfold a single function use 'za'

"  Display the current mode and partially-typed commands in the status line:
set showmode
set showcmd
set nobackup                  " Don't keep a backup file

"  Remove control-ms - for those mails sent from DOS:
cmap ;rcm %s/<C-M>//g

"set nowrap                    " don't make it look like there are line breaks where there aren't
filetype on                   " enable filetype detection
filetype plugin on            " this is for snippy
set nocompatible
set ruler " Always show current positions along the bottom 
"set cmdheight=2 " the command bar is 2 high
"set number " turn on line numbers
set lz " do not redraw while running macros (much faster) (LazyRedraw)
"set mouse=a " use mouse everywhere

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
"    Enable folding, but by default make it act like folding is off, because 
"    folding is annoying in anything but a few rare cases
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set foldenable " Turn on folding
set foldmethod=indent " Make folding indent sensitive
set foldlevel=100 " Don't autofold anything (but I can still fold manually)
set foldopen-=search " don't open folds when you search into them
set foldopen-=undo " don't open folds when you undo stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" for C-like programming, have automatic indentation
autocmd FileType c,cpp,slang set cindent
" for Perl programming, have things in braces indenting themselves:
autocmd FileType perl set smartindent


" use indents of 2 spaces, and have them copied down lines:
set shiftwidth=2
set softtabstop=2
set shiftround
set expandtab
set autoindent

"set ai
"map <F3> :w<CR>
"map <kPlus> :set nu<CR>
"map <kMinus> :set nonu<CR>

"  shift+f1 = complete filenames
imap <S-F1> <c-x><c-f>
"  shift+f2 = complete whole line
imap <S-F2> <c-x><c-l>

"  Prev buffer
"map <F1> :bp<CR>
"imap <F1> <c-[>:bp<CR>
"  Next buffer
"map <F2> :bn<CR>
"imap <F1> <c-[>:bn<CR>
"  Change split size
"map <S-F1> <c-w>+
"map <S-F2> <c-w>-
"  Split file explorer
map <F3> :Sex<CR>
imap <F3> <c-[>:Sex<CR>
"  hide/unhide split
map <F4> :hide<CR>
imap <F4> <c-[>:hide<CR>
map <S-F4> :sunhide<CR>
imap <S-F4> <c-[>:sunhide<CR>
"  Maximize buffer
map <F5> :only<CR>
imap <F5> <c-[>:only<CR>li
map <S-F5> :sunhide<CR>
imap <S-F5> <c-[>:sunhide<CR>li
"  Switch between splits
"  use <F6> to cycle through split windows (and <Shift>+<F6> to cycle
"  backwards,
map <F6> :wincmd w<CR>
imap <F6> <c-[>:wincmd w<CR>
map <S-F6> :wincmd W<CR>
imap <S-F6> <c-[>:wincmd W<CR>
"  my search dialog ..
map <F7> :%s///&c
imap <F7> <c-[>:%s///&c
"  Compile C file and open error window
set makeprg=gcc\ -c\ %
map <F9> :w<CR>:make<CR>:copen 3<CR>
"map <S-F9> :set makeprg=gcc\ -c\ %\ -o\ %<:make<CR>:copen 3<CR>

"select buffer (displays list of buffers, then you choose bufer number and pess enter)
map <F11> :buffers<CR>:b<Space>
imap <c-[><F11> :buffers<CR>:b<Space>
"unload buffer
map <F12> :bdelete<CR>
imap <F12> <c-[>:bdelete<CR>
map <S-F12> :bdelete!<CR>
imap <S-F12> <c-[>:bdelete<CR>

"map g :1^V^M
"map q :q<CR>

" Very cool tab completion
"function! InsertTabWrapper(direction)
"    let col = col('.') - 1
"    if !col || getline('.')[col - 1] !~ '\k'
"        return "\<tab>"
"    elseif "backward" == a:direction
"        return "\<c-p>"
"    else
"        return "\<c-n>"
"    endif
"endfunction
" 
"inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
"inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>
"
" toggle tab completion
"function! TabCompletion()
"    if mapcheck("\<tab>", "i") != ""
"        :iunmap <tab>
""        :iunmap <s-tab>
""        :iunmap <c-tab>
"        echo "tab completion off"
"    else
"        :imap <tab> <c-n>
""        :imap <s-tab> <c-p>
""        :imap <c-tab> <c-x><c-l>
"        echo "tab completion on"
"    endif
"endfunction

"shift+f12 to toggle tab comletion
"map <S-F11> :call TabCompletion()<cr>
 
" Unselect searched words
nmap <silent> <C-N> :silent noh<CR>


"shift-right in insert mode - to visual (as in windows - mark)
imap <S-Right> <Esc><Right>v
vmap <S-Right> <Right>
vmap <CR> <Esc>
nmap <S-Right> v<Right>

set  path=.,,~
set   shortmess=at

"Shift-RIGHT complete when inc search what's under the cursor
"Shift-Down complete whole word - under cursor
cnoremap <S-Down> <CR>yiw<BS>/<C-R>"
cnoremap <S-Right> <CR>y/<Up>/e+1<CR><BS>/<C-R>=escape(@",'.*\/?')<CR>

se wildignore=*.o,*.obj,*.bak,*.exe
" While typing a search pattern, show immediately where the so far typed pattern matches.
se incsearch 
" Use standard dictionary file
set dictionary=/usr/share/dict/words

"Insert from clipboard 
map <S-Insert> i<MiddleMouse><Esc>
map! <S-Insert> <MiddleMouse>

"I do not like replace mode
"map <Insert> <Esc>i
"map! <Insert> <Esc>i

"LIKE NODEPADE
"map! <F5>     <Esc>:r! date<CR>i<xHome><BS><xEnd>

"-----------------------------
" Highlight all instances of word under cursor, when idle. 
" Useful when studying strange source code. 
" Turn on/off with z/ (or key of your choice) 
:map z/ :call Mosh_Auto_Highlight_Toggle()<CR> 

:function! Mosh_Auto_Highlight_Cword() 
     :exe "let @/='\\<".expand("<cword>")."\\>'" 
:endfunction 

function! Mosh_Auto_Highlight_Toggle() 
    :if exists("#CursorHold#*") 
    :  au! CursorHold * 
    :  let @/='' 
    :else 
    :  set hlsearch
    :  set updatetime=500 
    :  au! CursorHold * nested call Mosh_Auto_Highlight_Cword() 
    :endif 
endfunction 
"------------------------------

"Change snipets to ctrl-space 
"Need to fix this sometime
let g:snippetsEmu_key = "<C-B>"

if (has("gui_running"))
    set guifont=Luxi\ Mono\ 14  
    set mousem=popup    " Nice pop-up
    "set km=startsel,stopsel    " Use keys to select text
    set selection=exclusive " Allow one char past EOL
    set ttymouse=xterm2 " Terminal type for mouse code recognition
    $VIMRUNTIME/colors/elflord.vim  
endif
