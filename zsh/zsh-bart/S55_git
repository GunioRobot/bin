#!/bin/zsh

export GIT_AUTHOR_NAME="${FULLNAME}"
export GIT_AUTHOR_EMAIL="${EMAIL}"
export GIT_COMMITTER_NAME="${FULLNAME}"
export GIT_COMMITTER_EMAIL="${EMAIL}"

# ----------------------------------------------------------------------
# various git scripts

gitize() {
        git init \
        && git add . \
        && git commit -a -m"initial commit"
}

# ----------------------------------------------------------------------
# The following implements a caching mechanism for git information.
# The RPROMPT executes get_git_bprompt_info() and include the output...
#
#   setopt prompt_subst
#   RPROMPT="$(get_git_prompt_info)"
#
# ATM we only capture the git branch
export __CURRENT_GIT_BRANCH=
export __CURRENT_GIT_VARS_INVALID=1

# get the name of the branch we are on
parse_git_branch() {
        git-branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) -- /'
}

zsh_git_invalidate_vars() {
        export __CURRENT_GIT_VARS_INVALID=1
}
zsh_git_compute_vars() {
        export __CURRENT_GIT_BRANCH="$(parse_git_branch)"
        export __CURRENT_GIT_VARS_INVALID=
}

# on each chdir update the cached git variable(s)
preexec_functions+='zsh_git_preexec_update_vars'
chpwd_functions+='zsh_git_chpwd_update_vars'
#precmd_functions+='zsh_git_precmd_update_vars'

zsh_git_chpwd_update_vars() {
        zsh_git_invalidate_vars
}
zsh_git_preexec_update_vars() {
        case "$(history $HISTCMD)" in 
                *git*) zsh_git_invalidate_vars ;;
        esac
}

# this function returns the current git branch
get_git_prompt_info() {
        test -n "$__CURRENT_GIT_VARS_INVALID" && zsh_git_compute_vars
        echo $__CURRENT_GIT_BRANCH
}

