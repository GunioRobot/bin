# Mike's irb config
# 12/03/07
# 
#All of the below is taken from http://rubygarden.org/ruby/page/show/Irb/TipsAndTricks

HISTFILE = "~/.history.irb"
  MAXHISTSIZE = 5000
   
  begin
    if defined? Readline::HISTORY
      histfile = File::expand_path( HISTFILE )
      if File::exists?( histfile )
        lines = IO::readlines( histfile ).collect {|line| line.chomp}
        puts "Read %d saved history commands from %s." %
          [ lines.nitems, histfile ] if $DEBUG || $VERBOSE
        Readline::HISTORY.push( *lines )
      else
        puts "History file '%s' was empty or non-existant." %
          histfile if $DEBUG || $VERBOSE
      end
  
      Kernel::at_exit {
        lines = Readline::HISTORY.to_a.reverse.uniq.reverse
        lines = lines[ -MAXHISTSIZE, MAXHISTSIZE ] if lines.nitems > MAXHISTSIZE
        $stderr.puts "Saving %d history lines to %s." %

          [ lines.length, histfile ] if $VERBOSE || $DEBUG
        File::open( histfile, File::WRONLY|File::CREAT|File::TRUNC ) {|ofh|
          lines.each {|line| ofh.puts line }
        }
      }
    end
  end

#new way
#require 'irb/completion'
#require 'irb/ext/save-history'
#ARGV.concat [ "--readline", "--prompt-mode", "simple" ]
#IRB.conf[:SAVE_HISTORY] = 5000
#IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"

#tab completion yay!
require 'irb/completion'
# ARGV.concat [ "--readline", "--prompt-mode", "simple" ]

#get result of the last statement
IRB.conf[:EVAL_HISTORY] = 1000 
IRB.conf[:SAVE_HISTORY] = 100 

#Starting an IRB session from within a running program
  require 'breakpoint'
  
  (1..10).each do |n|
    breakpoint
  end
#This will start an IRB session each time the "breakpoint" method is called. Within that session, for instance:
#
#  >> n
#  => 4
#  >> local_variables
#  => ['_', 'n']
#
#Also see HTTP://ruby-breakpoint.rubyforge.org/ for more details on the breakpoint library. 

#Copy and paste friendly IRB session
#start with irb --prompt xmp
IRB.conf[:PROMPT][:XMP][:RETURN] = "\# => %s\n"

#See what methods can be called on an object
require 'rubygems'
gem 'extensions', '>= 0.6.0'     # for Enumerable#partition_by
require 'extensions/all'
module Kernel
  def m(object=Object.new, pattern=nil)
    methods = object.public_methods(false).sort
    methods = methods.grep pattern unless pattern.nil?
    ObjectMethods.new(methods)
  end
  class ObjectMethods < Array
    def inspect
      puts
      methods_by_letter = self.partition_by { |word| word[0,1].upcase }
      ('A'..'Z').each do |letter|
        methods = methods_by_letter[letter]
        if methods
          puts " " + methods.join('  ')
        end
      end
      puts
    end
  end
end

